<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="SwiftSuspenders" basedir="." default="test">

  <!-- if downloading iv specify the mirror from where to download. you can find the mirrors list here:
       http://ant.apache.org/ivy/download.cgi -->
  <property name="ivy.download.mirror" value="http://apache.deathculture.net" />
  <property name="ivy.download.version" value="2.2.0" />
  <property name="ivy.download.file" value="apache-ivy-${ivy.download.version}-bin.zip" />
  <property name="ivy.download.url"     value="${ivy.download.mirror}/ant/ivy/${ivy.download.version}/${ivy.download.file}" />

  <!-- get the ivy settings file -->
  <property name="ivy.settings.file" value="ivysettings.xml" />

  <!-- set up a prefix for all environment variables -->
  <property environment="env."/>
  <!-- load user properties to override defaults -->
  <property file="user.properties"/>

  <!-- System environment or user properties must contain FLEX_HOME and ANT_HOME variable that points to Flex SDK -->
  <property name="FLEX_HOME" location="${env.FLEX_HOME}"/>
  <property name="ANT_HOME" location="${env.ANT_HOME}"/>

  <!-- identify properties file -->
  <property file="build.properties"/>
  
  <!-- Set up Flex and FlexUnit ant tasks -->
  <taskdef resource="flexTasks.tasks" classpath="${lib.bin.loc}/flexTasks.jar"/>
  <taskdef resource="flexUnitTasks.tasks" classpath="${lib.bin.loc}/flexUnitTasks.jar"/>

  <target name="usage">
      <echo message=""/>
      <echo message="SwiftSuspenders Build Usage"/>
      <echo message="-----------------------------------"/>
      <echo message=""/>
      <echo message="Available targets are:"/>
      <echo message=""/>
      <echo message="test          --> Build SwiftSuspenders SWC and run unit tests"/>
      <echo message="asdoc         --> Build SwiftSuspenders SWC, test, and generate asdocs"/>
      <echo message="package       --> Build SwiftSuspenders SWC, test, and create release zip"/>
      <echo message="compile       --> Build SwiftSuspenders SWC"/>
      <echo message="clean         --> Remove all folders created by build script"/>
      <echo message="init          --> Clean and create build folders"/>
      <echo message=""/>
  </target>
  
  <!-- Clean Build and Report files -->
  <target name="clean">
    <!-- Remove all directories created during the build process -->
    <echo>[clean] Removing Build and Report directories</echo>
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${report.loc}" defaultexcludes="false">
        <include name="**/*"/>
      </fileset>
      <fileset dir="${dist.loc}" defaultexcludes="false">
        <include name="**/*"/>
      </fileset>
    </delete>
    <echo>[clean] Build and Report directories removed</echo>
  </target>

<!-- check if the file exists in your ant lib -->
    <target name="-check-use-file">
        <available property="file.exists" file="${ANT_HOME}/lib/ivy-${ivy.download.version}.jar"/>
    </target>

<!-- Get ivy jar for ant if not installed already -->
  <target name="download_ivy" depends="-check-use-file" unless="file.exists">
      <echo>[IVY download] Downloading ivy jar into your ant's lib folder</echo>
      <mkdir dir="tmp" />
      <get src="${ivy.download.url}" dest="tmp" usetimestamp="true"/>
      <unzip src="tmp/${ivy.download.file}" dest="tmp">
          <patternset>
                  <include name="apache-ivy-${ivy.download.version}/ivy-${ivy.download.version}.jar"/>
          </patternset>
          <mapper type="flatten"/>
      </unzip>
      <copy file="tmp/ivy-${ivy.download.version}.jar" todir="${ANT_HOME}/lib" />
      <delete dir="tmp" />
      <echo>[IVY download] Done</echo>
  </target>

<!-- Get dependencies from repo if libraries does not exists or version are wrong -->
  <target name="get_dependencies" depends="download_ivy,clean">
    <echo>[dependencies] Retrieving dependencies</echo>
    <ivy:configure />
    <copy file="${template.loc}/ivy.tmpl" tofile="ivy.xml" overwrite="true">
      <filterchain>
        <replacetokens>
          <token key="ssversion" value="${swift.suspenders.version}"/>
        </replacetokens>
      </filterchain>
    </copy>
	<ivy:resolve file="ivy.xml"/>
	<ivy:retrieve type="swc" pattern="${lib.bin.loc}/[artifact]-[revision].[ext]"/>
	<ivy:retrieve type="src" pattern="${lib.src.loc}/[artifact]-[revision].[ext]"/>
    <echo>[dependencies] Dependencies retrieved</echo>
  </target>

  <!-- Create directories needed for the build process -->
  <target name="init" depends="get_dependencies">
    <echo>[init] Creating Bin and Report directories</echo>
    <mkdir dir="${bin.loc}"/>
    <mkdir dir="${report.loc}"/>
    <echo>[init] Bin and Report directories created</echo>
  </target>
  
  <!-- Compile Release SWC -->
  <target name="compile" depends="init">
    <echo>[compile] Compiling release SWC</echo>
    <echo>[compile] Using Flex SDK at: ${FLEX_HOME}</echo>
	<java jar="${FLEX_HOME}/lib/compc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
      <!-- Build our SWC with a versioned name. -->
      <arg value="-output=${bin.loc}/${project.name.versioned}.swc" />
	
      <!-- We want all the org package classes in the SWC being built. -->
      <arg value="-include-sources=${main.src.loc}/org" />
	
      <!-- Include classes from SWCs in this folder, but only the ones we use. -->
      <arg value="-library-path+=${lib.bin.loc}" />
	
	  <!-- Keep the magic alive. -->
      <arg value="-keep-as3-metadata+=Inject" />
		<arg value="-keep-as3-metadata+=PostConstruct" />
	
	  <!-- Boolean mosh pit! -->
      <arg value="-incremental=true" />
      <arg value="-static-link-runtime-shared-libraries=true" />
      <arg value="-verbose-stacktraces=true" />
      <arg value="-headless-server=true" />
	</java>
    <echo>[compile] Release SWC ${project.name}-${swift.suspenders.version}.swc created successfully</echo>
  </target>
  
  <!-- Run Unit Tests -->
  <target name="test" depends="compile">
    <echo>[test] Running Unit Tests</echo>
    <!-- Compile TestRunner.mxml as a SWF -->
	<java jar="${FLEX_HOME}/lib/mxmlc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
      <arg value="${test.src.loc}/SwiftSuspendersTestRunner.as" />
      <arg value="-source-path=${main.src.loc}" />
	
	  <!-- Flash those sweet legs. Blink and you'll miss 'em. -->
      <arg value="-output=${bin.loc}/TestRunner.swf" />
      <arg value="-default-size=200,200" />
      <arg value="-default-background-color=0x000000" />

	  <!-- Keep the magic alive. -->
      <arg value="-keep-as3-metadata+=Inject" />
	  <arg value="-keep-as3-metadata+=PostConstruct" />
		
      <!-- Include classes from SWCs in this folder, but only the ones we use. -->
      <arg value="-library-path+=${lib.bin.loc}" />
	
	  <!-- So true. -->
      <arg value="-incremental=true" />
      <arg value="-static-link-runtime-shared-libraries=true" />
      <arg value="-verbose-stacktraces=true" />
      <arg value="-headless-server=true" />
	</java>
    <!-- Execute TestRunner.swf as FlexUnit tests and publish reports -->
    <flexunit swf="bin/TestRunner.swf" toDir="${report.loc}" haltonfailure="true" verbose="true" localTrusted="true"/>
    <!-- Generate readable JUnit-style reports -->
    <junitreport todir="${report.loc}">
      <fileset dir="${report.loc}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${report.loc}/html"/>
    </junitreport>
    <echo>[test] Finished running Unit Tests</echo>
  </target>
  
  <!-- Build Documentation -->
  <target name="asdoc" depends="test">
    <echo>[create-docs] Generating ASDOC documentation</echo>
    <tstamp>
      <format property="docgen.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
    </tstamp>

    <java jar="${FLEX_HOME}/lib/asdoc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
      <arg line="-external-library-path ${lib.bin.loc}"/>
      <arg line="-doc-sources ${main.src.loc}"/>
      <arg line="-source-path ${main.src.loc}"/>
      <arg line="-output ${doc.loc}"/>
      <arg line="-footer 'SwiftSuspenders ${swift.suspenders.version} - Documentation generated at: ${docgen.time}'" />
      <arg line="-window-title 'SwiftSuspenders ${swift.suspenders.version}'"/>
      <arg line="-main-title 'SwiftSuspenders ${swift.suspenders.version}'"/>
	</java>
    <echo>[create-docs] ASDOC documentation generated successfully</echo>
  </target>
  
  <!-- Package the Build -->
  <target name="package" depends="asdoc">
    <tstamp>
      <format property="touch.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
    </tstamp>
    <!-- Assemble  -->
    <echo>[package] Packaging Release</echo>
    <mkdir dir="${dist.loc}"/>
    <mkdir dir="${dist.loc}/bin"/>
    <mkdir dir="${dist.loc}/src"/>
    <copy file="${bin.loc}/${project.name}-${swift.suspenders.version}.swc" todir="${dist.loc}/bin"/>
    <copy todir="${dist.loc}/src/org">
      <fileset dir="${main.src.loc}/org"/>
    </copy>
    <!-- Copy README  -->
    <copy file="${template.loc}/README.tmpl" tofile="${dist.loc}/README" overwrite="true">
      <filterchain>
        <replacetokens>
          <token key="date" value="${touch.time}"/>
          <token key="rlversion" value="${swift.suspenders.version}"/>
          <token key="releasename" value="${project.name}-${swift.suspenders.version}"/>
          <token key="ssversion" value="${swift.suspenders.version}"/>
          <token key="sslink" value="${swift.suspenders.link}"/>
          <token key="rlprojectlink" value="${robotlegs.project.link}"/>
          <token key="bestpracticeslink" value="${robotlegs.faq.link}"/>
          <token key="faqlink" value="${robotlegs.best.practices.link}"/>
        </replacetokens>
      </filterchain>
    </copy>
    <!-- Copy LICENSE  -->
    <copy file="LICENSE" tofile="${dist.loc}/LICENSE" overwrite="true"/>
    <!-- Zip It  -->
    <zip destfile="${dist.loc}/${project.name}-${swift.suspenders.version}.zip">
      <fileset dir="${dist.loc}"/>
    </zip>
    <!-- Clean Up  -->
    <delete file="${dist.loc}/${project.name}-${swift.suspenders.version}.swc"/>
    <delete file="${dist.loc}/README"/>
    <delete file="${dist.loc}/LICENSE"/>
    <delete dir="${dist.loc}/bin"/>
    <delete dir="${dist.loc}/src"/>
    <echo>[package] Release packaged successfully</echo>
  </target>

<!-- Publish to the repo -->
  <target name="publish" depends="package">
	<!-- zip the source files -->
	  <delete file="${bin.loc}/${project.name.versioned}.src.zip" failonerror="false"/>
  	  <zip destfile="${bin.loc}/${project.name.versioned}.src.zip">
	    <zipfileset dir="${main.src.loc}/org" prefix="org"/>
	  </zip>
	<!-- publish the swc and the src.zip -->
      <ivy:configure override="true"/>
      <ivy:resolve file="ivy.xml" />
	  <!-- if overwrite is true, if the library version already exists on the repo it will be overriden. -->
      <ivy:publish resolver="as-artifacts" forcedeliver="true" overwrite="false">
          <ivy:artifacts pattern="${bin.loc}/[artifact]-[revision].[ext]" />
      </ivy:publish>
  </target>

</project>
