<?xml version="1.0"?>
<!--
  ~ Copyright (c) 2011 the original author or authors
  ~
  ~ Permission is hereby granted to use, modify, and distribute this file
  ~ in accordance with the terms of the license agreement accompanying it.
  -->

<project name="Swiftsuspenders" basedir="." default="test">

  <!-- set up a prefix for all environment variables -->
  <property environment="env."/>
  <!-- load user properties to override defaults -->
  <property file="user.properties"/>
  <!-- System environment must contain FLEX_HOME variable that points to Flex SDK -->
  <property name="FLEX_HOME" location="${env.FLEX_HOME}"/>
  
  <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />

	<!-- identify properties file -->
  <property file="build.properties"/>
  
  <!-- Set up Flex and FlexUnit ant tasks -->
  <taskdef resource="flexUnitTasks.tasks" classpath="${lib.loc}/flexUnitTasks-4.1.0-8.jar"/>

  <target name="usage">
      <echo message=""/>
      <echo message="Swiftsuspenders Build Usage"/>
      <echo message="-----------------------------------"/>
      <echo message=""/>
      <echo message="Available targets are:"/>
      <echo message=""/>
      <echo message="test          --> Build Swiftsuspenders SWC and run unit tests"/>
      <echo message="asdoc         --> Build Swiftsuspenders SWC, test, and generate asdocs"/>
      <echo message="package       --> Build Swiftsuspenders SWC, test, and create release zip"/>
      <echo message="compile       --> Build Swiftsuspenders SWC"/>
      <echo message="clean         --> Remove all folders created by build script"/>
      <echo message="init          --> Clean and create build folders"/>
      <echo message=""/>
  </target>
  
  <!-- Clean Build and Report files -->
  <target name="clean">
    <!-- Remove all directories created during the build process -->
    <echo>[clean] Removing Build and Report directories</echo>
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${report.loc}" defaultexcludes="false">
        <include name="**/*"/>
      </fileset>
      <fileset dir="${dist.loc}" defaultexcludes="false">
        <include name="**/*"/>
      </fileset>
    </delete>
    <echo>[clean] Build and Report directories removed</echo>
  </target>
  
  <!-- Create directories needed for the build process -->
  <target name="init" depends="clean">
    <echo>[init] Creating Bin and Report directories</echo>
    <mkdir dir="${bin.loc}"/>
    <mkdir dir="${report.loc}"/>
    <echo>[init] Bin and Report directories created</echo>
  </target>
  
  <!-- Compile Release SWC -->
  <target name="compile" depends="init">
    <echo>[compile] Compiling release SWC</echo>
    <echo>[compile] Using Flex SDK at: ${FLEX_HOME}</echo>
	<java jar="${FLEX_HOME}/lib/compc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
      <!-- Build our SWC with a versioned name. -->
      <arg value="-output=${bin.loc}/${project.name.versioned}.swc" />
	
      <!-- We want all the org package classes in the SWC being built. -->
      <arg value="-include-sources=${main.src.loc}" />

      <arg value="-include-file=metadata.xml,${main.src.loc}/metadata.xml" />
	
      <!-- Include classes from SWCs in this folder, but only the ones we use. -->
      <arg value="-library-path+=${lib.loc}" />

		<arg value="-target-player=10.2"/>
	
	  <!-- Keep the magic alive. -->
      <arg value="-keep-as3-metadata+=Inject" />
	  <arg value="-keep-as3-metadata+=PostConstruct" />
	  <arg value="-keep-as3-metadata+=PreDestroy" />

	  <!-- Boolean mosh pit! -->
      <arg value="-incremental=true" />
      <arg value="-static-link-runtime-shared-libraries=true" />
      <arg value="-verbose-stacktraces=true" />
      <arg value="-headless-server=true" />
	</java>
    <echo>[compile] Release SWC ${project.name}-${swift.suspenders.version}.swc created successfully</echo>
  </target>
  
  <!-- Run Unit Tests -->
  <target name="test" depends="compile">
    <echo>[test] Running Unit Tests</echo>
    <!-- Compile TestRunner.mxml as a SWF -->
	<java jar="${FLEX_HOME}/lib/mxmlc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
      <arg value="${test.src.loc}/SwiftSuspendersTestRunner.as" />
      <arg value="-source-path=${main.src.loc}" />
	
	  <!-- Flash those sweet legs. Blink and you'll miss 'em. -->
      <arg value="-output=${bin.loc}/TestRunner.swf" />
      <arg value="-default-size=200,200" />
      <arg value="-default-background-color=0x000000" />

	  <!-- Keep the magic alive. -->
      <arg value="-keep-as3-metadata+=Inject" />
	  <arg value="-keep-as3-metadata+=PostConstruct" />
		<arg value="-keep-as3-metadata+=PreDestroy" />
		
      <!-- Include classes from SWCs in this folder, but only the ones we use. -->
      <arg value="-library-path+=${lib.loc}" />

	  <arg value="-target-player=10.2"/>
	
	  <!-- So true. -->
      <arg value="-incremental=true" />
      <arg value="-static-link-runtime-shared-libraries=true" />
      <arg value="-verbose-stacktraces=true" />
      <arg value="-headless-server=true" />
	</java>
    <!-- Execute TestRunner.swf as FlexUnit tests and publish reports -->
    <flexunit swf="bin/TestRunner.swf" toDir="${report.loc}" haltonfailure="true" verbose="true" localTrusted="true"/>
    <!-- Generate readable JUnit-style reports -->
    <junitreport todir="${report.loc}">
      <fileset dir="${report.loc}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${report.loc}/html"/>
    </junitreport>
    <echo>[test] Finished running Unit Tests</echo>
  </target>
  
  <!-- Build Documentation -->
  <target name="asdoc">
    <echo>[create-docs] Generating ASDOC documentation</echo>
    <tstamp>
      <format property="docgen.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
    </tstamp>
	  <asdoc output="${doc.loc}" lenient="true" failonerror="true">
		  <doc-sources path-element="${main.src.loc}"/>
	  </asdoc>
    <echo>[create-docs] ASDOC documentation generated successfully</echo>
  </target>
  
  <!-- Package the Build -->
  <target name="package" depends="test">
    <tstamp>
      <format property="touch.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
    </tstamp>
    <!-- Assemble  -->
    <echo>[package] Packaging Release</echo>
    <mkdir dir="${dist.loc}"/>
    <mkdir dir="${dist.loc}/bin"/>
    <mkdir dir="${dist.loc}/src"/>
    <copy file="${bin.loc}/${project.name}-${swift.suspenders.version}.swc" todir="${dist.loc}/bin"/>
    <copy todir="${dist.loc}/src/org">
      <fileset dir="${main.src.loc}/org"/>
    </copy>
    <!-- Copy README  -->
    <copy file="${template.loc}/README.tmpl" tofile="${dist.loc}/README" overwrite="true">
      <filterchain>
        <replacetokens>
          <token key="date" value="${touch.time}"/>
          <token key="rlversion" value="${swift.suspenders.version}"/>
          <token key="releasename" value="${project.name}-${swift.suspenders.version}"/>
          <token key="ssversion" value="${swift.suspenders.version}"/>
          <token key="sslink" value="${swift.suspenders.link}"/>
          <token key="rlprojectlink" value="${robotlegs.project.link}"/>
          <token key="bestpracticeslink" value="${robotlegs.faq.link}"/>
          <token key="faqlink" value="${robotlegs.best.practices.link}"/>
        </replacetokens>
      </filterchain>
    </copy>
    <!-- Copy LICENSE  -->
    <copy file="LICENSE" tofile="${dist.loc}/LICENSE" overwrite="true"/>
    <!-- Zip It  -->
    <zip destfile="${dist.loc}/${project.name}-${swift.suspenders.version}.zip">
      <fileset dir="${dist.loc}"/>
    </zip>
    <!-- Clean Up  -->
    <delete file="${dist.loc}/${project.name}-${swift.suspenders.version}.swc"/>
    <delete file="${dist.loc}/README"/>
    <delete file="${dist.loc}/LICENSE"/>
    <delete dir="${dist.loc}/bin"/>
    <delete dir="${dist.loc}/src"/>
    <echo>[package] Release packaged successfully</echo>
  </target>

</project>
